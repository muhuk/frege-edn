module com.muhuk.EDN where

import frege.data.TreeMap (TreeMap, TreeSet)


class ToEDN a where
    toEDN :: a -> Value
    toEDN x = case toEDNtagged x of
       (Tagged _ y) -> y
       (NoTag y) -> y

    toEDNtagged :: a -> TaggedValue
    toEDNtagged = NoTag â€¢ toEDN 


-- class FromEDN a where
--     fromEDN :: MonadFail m => Value -> m a
--     fromEDNtagged :: MonadFail m => TaggedValue -> m a


data Namespaced = Namespaced String String
derive Eq Namespaced
derive Ord Namespaced
derive Show Namespaced


type EDNList = [TaggedValue]
type EDNVector = [TaggedValue]
type EDNMap = TreeMap Value TaggedValue
type EDNSet = TreeSet TaggedValue


data Value = Nil
           | Boolean Bool
           | String String
           | Character Char
           | Symbol Namespaced
           | Keyword Namespaced
           | Integer Integer
           | Floating Double
           | List EDNList
           | Vector EDNVector
           | Map EDNMap
           | Set EDNSet
derive Show Value


data Tagged a = NoTag a | Tagged Namespaced a
derive Eq Tagged a
derive Ord Tagged a
derive Show Tagged a


type TaggedValue = Tagged Value


-- Encoding


instance ToEDN (ToEDN a) => (Maybe a) where
    toEDN Nothing = Nil
    toEDN (Just a) = toEDN a


instance ToEDN String where
    toEDN s = (String s)


encodeTaggedValue :: TaggedValue -> String
encodeTaggedValue (NoTag v) = encodeValue v
encodeTaggedValue (Tagged ns v) = (encodeNamespaced ns) ++ " " ++ (encodeValue v)


encodeValue :: Value -> String
encodeValue Nil = "nil"
encodeValue (Boolean v) = show v
encodeValue (String v) = "\"" ++ v ++ "\""
encodeValue _ = ""


encodeNamespaced :: Namespaced -> String
encodeNamespaced (Namespaced "" s) = s
encodeNamespaced (Namespaced ns s) = ns ++ "/" ++ s


encode :: ToEDN a => a -> String
encode = encodeTaggedValue . toEDNtagged
