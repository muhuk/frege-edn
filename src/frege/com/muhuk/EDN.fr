module com.muhuk.EDN where


import com.muhuk.edn.Value (Namespaced, Tagged,  TaggedValue, Value)


class ToEDN a where
    toEDN :: a -> Value
    toEDN x = case toEDNtagged x of
       (Tagged _ y) -> y
       (NoTag y) -> y

    toEDNtagged :: a -> TaggedValue
    toEDNtagged = NoTag â€¢ toEDN 


-- class FromEDN a where
--     fromEDN :: MonadFail m => Value -> m a
--     fromEDNtagged :: MonadFail m => TaggedValue -> m a


-- Encoding


instance ToEDN (ToEDN a) => (Maybe a) where
    toEDN Nothing = Nil
    toEDN (Just a) = toEDN a


instance ToEDN String where
    toEDN s = (String s)


encodeTaggedValue :: TaggedValue -> String
encodeTaggedValue (NoTag v) = encodeValue v
encodeTaggedValue (Tagged ns v) = (encodeNamespaced ns) ++ " " ++ (encodeValue v)


encodeValue :: Value -> String
encodeValue Nil = "nil"
encodeValue (Boolean v) = show v
encodeValue (String v) = "\"" ++ v ++ "\""
encodeValue _ = ""


encodeNamespaced :: Namespaced -> String
encodeNamespaced (Namespaced "" s) = s
encodeNamespaced (Namespaced ns s) = ns ++ "/" ++ s


encode :: ToEDN a => a -> String
encode = encodeTaggedValue . toEDNtagged
